#!/usr/bin/env bash
set -euo pipefail

# Configuration
MODULE="github.com/majikmate/assignment-pull-request"
BINARY_NAME="githook"

# Determine which git hook is calling us
HOOK_TYPE="$(basename "$0")"

# Check if Go is available
if ! command -v go >/dev/null 2>&1; then
    echo "Go not found, skipping protect-sync update check" >&2
    exit 0
fi

# Install/update binary to latest version
echo "Installing/updating protect-sync to latest version..." >&2
go install "${MODULE}/cmd/${BINARY_NAME}@latest" 2>/dev/null || {
    echo "Failed to install ${BINARY_NAME}, trying local build..." >&2
    # Fallback: try to find and use a local binary
    if [[ -f "./cmd/${BINARY_NAME}/${BINARY_NAME}" ]]; then
        BINARY_PATH="./cmd/${BINARY_NAME}/${BINARY_NAME}"
    elif command -v "${BINARY_NAME}" >/dev/null 2>&1; then
        BINARY_PATH="$(command -v "${BINARY_NAME}")"
    else
        echo "No ${BINARY_NAME} binary available, skipping" >&2
        exit 0
    fi
}

# Now run the actual hook logic
REPO_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || true)"
# Exit if not in a git repo
[[ -n "$REPO_ROOT" ]] || exit 0

# Change to repository root
cd "$REPO_ROOT"

# Run githook if it's available
BINARY_PATH="${BINARY_PATH:-${GOBIN:-$(go env GOPATH)/bin}/${BINARY_NAME}}"
if [[ -x "$BINARY_PATH" ]]; then
    # Pass hook type and all original arguments
    "$BINARY_PATH" "$HOOK_TYPE" "$@" || {
        echo "githook failed for $HOOK_TYPE" >&2
        exit 0  # Don't fail the git operation
    }
else
    echo "githook binary not available at $BINARY_PATH" >&2
    exit 0  # Don't fail the git operation
fi